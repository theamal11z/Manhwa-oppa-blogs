---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import { SITE_TITLE, getTitle, getDescription } from '../consts';

interface Props {
	title: string;
	description: string;
	image?: string;
	keywords?: string;
	author?: string;
	publishedDate?: Date;
	modifiedDate?: Date;
	pageType?: string;
	articleSection?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Get site settings from Supabase
const dynamicTitle = await getTitle();
const dynamicDescription = await getDescription();

// Use dynamic values if available, otherwise fall back to props
const {
  title: propTitle,
  description: propDescription,
  image = '/blog-placeholder-1.jpg',
  keywords = 'manga, manhwa, anime, blog, reviews, recommendations',
  author = 'Manhva-Oppa',
  publishedDate,
  modifiedDate,
  pageType = 'website',
  articleSection = 'Blog'
} = Astro.props;

const title = propTitle || dynamicTitle;
const description = propDescription || dynamicDescription;

// Format dates for SEO tags if provided
const formattedPublishedDate = publishedDate ? new Date(publishedDate).toISOString() : null;
const formattedModifiedDate = modifiedDate ? new Date(modifiedDate).toISOString() : formattedPublishedDate;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="manifest" href="/site.webmanifest" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={dynamicTitle}
	href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Performance & Security -->
<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests" />
<meta name="referrer" content="no-referrer-when-downgrade" />

<!-- Font preloads -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />
<link rel="preconnect" href="https://iwybjtgyldetjzpgpjal.supabase.co" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="keywords" content={keywords} />
<meta name="author" content={author} />
<meta name="robots" content="index, follow" />
<meta name="language" content="English" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={pageType === 'article' ? 'article' : 'website'} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:site_name" content={dynamicTitle} />
<meta property="og:locale" content="en_US" />
{pageType === 'article' && formattedPublishedDate && (
  <meta property="article:published_time" content={formattedPublishedDate} />
)}
{pageType === 'article' && formattedModifiedDate && (
  <meta property="article:modified_time" content={formattedModifiedDate} />
)}
{pageType === 'article' && (
  <meta property="article:section" content={articleSection} />
)}
{pageType === 'article' && keywords && (
  <meta property="article:tag" content={keywords.split(',')[0].trim()} />
)}

<!-- Twitter/X -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:url" content={Astro.url} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={new URL(image, Astro.url)} />
<meta name="twitter:creator" content="@manhvaoppa" />
<meta name="twitter:site" content="@manhvaoppa" />

<!-- Structured Data / JSON-LD -->
<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": ${JSON.stringify(pageType === 'article' ? 'Article' : 'WebSite')},
    "headline": ${JSON.stringify(title)},
    "description": ${JSON.stringify(description)},
    "image": ${JSON.stringify(new URL(image, Astro.url).toString())},
    "author": {
      "@type": ${JSON.stringify(author !== 'Manhva-Oppa' ? 'Person' : 'Organization')},
      "name": ${JSON.stringify(author)},
      ${author !== 'Manhva-Oppa' ? '' : `"url": ${JSON.stringify(Astro.site?.toString())}`}
    },
    "publisher": {
      "@type": "Organization",
      "name": ${JSON.stringify(dynamicTitle)},
      "logo": {
        "@type": "ImageObject",
        "url": ${JSON.stringify(new URL('/favicon.svg', Astro.site).toString())}
      }
    },
    "url": ${JSON.stringify(Astro.url.toString())},
    ${pageType === 'article' && formattedPublishedDate ? `"datePublished": ${JSON.stringify(formattedPublishedDate)},` : ''}
    ${pageType === 'article' && formattedModifiedDate ? `"dateModified": ${JSON.stringify(formattedModifiedDate)},` : ''}
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": ${JSON.stringify(Astro.url.toString())}
    }
  }
</script>

{Astro.props.breadcrumbs && (
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement": Astro.props.breadcrumbs.map((crumb, idx) => ({
        "@type": "ListItem",
        "position": idx + 1,
        "name": crumb.label,
        "item": new URL(crumb.path, Astro.site).toString()
      }))
    })}
  </script>
)
}
