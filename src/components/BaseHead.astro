---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import { SITE_TITLE, getTitle, getDescription } from '../consts';
import { SEO } from 'astro-seo';

interface Props {
	title: string;
	description: string;
	image?: string;
	keywords?: string;
	author?: string;
	publishedDate?: Date;
	modifiedDate?: Date;
	pageType?: string;
	articleSection?: string;
	isMangaPage?: boolean;
	manga?: any;
	isIndexed?: boolean;
	breadcrumbs?: Array<{label: string, path: string}>;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Get site settings from Supabase
const dynamicTitle = await getTitle();
const dynamicDescription = await getDescription();

// Use dynamic values if available, otherwise fall back to props
const {
  title: propTitle,
  description: propDescription,
  image = '/blog-placeholder-1.jpg',
  keywords = 'manga, manhwa, best manhwa 2024, top manga recommendations, romance manhwa, action manga, webtoon recommendations, manhwa rankings, read manhwa online, solo leveling, tower of god, omniscient reader, manga reviews, isekai manga, fantasy manhwa, cultivation manhwa, slice of life manga, horror manhwa, martial arts manga, best completed manhwa, ongoing manhwa series, manga release schedule, anime adaptations, light novels, manhwa vs manga, Korean comics, webtoon originals, Japanese manga, seinen, shounen, josei, shoujo, cultivation, system, level up manhwa',
  author = 'Manhva-Oppa',
  publishedDate,
  modifiedDate,
  pageType = 'website',
  articleSection = 'Blog',
  isMangaPage = false,
  manga = null,
  isIndexed = true,
  breadcrumbs
} = Astro.props;

const title = propTitle || dynamicTitle;
const description = propDescription || dynamicDescription;

// Format dates for SEO tags if provided
const formattedPublishedDate = publishedDate ? new Date(publishedDate).toISOString() : null;
const formattedModifiedDate = modifiedDate ? new Date(modifiedDate).toISOString() : formattedPublishedDate;

// Prepare image URL properly
const fullImageUrl = image.startsWith('http') ? image : new URL(image, Astro.site).toString();

// Generate extended meta based on content type
const extendedMeta = [];

// Add manga-specific meta tags if applicable
if (isMangaPage && manga) {
  extendedMeta.push(
    { name: "manga:title", content: manga.title },
    { name: "manga:author", content: manga.author || "Unknown" },
    { name: "manga:status", content: manga.status || "Ongoing" },
    { name: "manga:genres", content: manga.genres?.map(g => g.name).join(", ") || "" }
  );
}
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />

<!-- Icons -->
<link rel="icon" type="image/jpeg" href="/images/favicon.jpg" />
<link rel="apple-touch-icon" href="/images/favicon.jpg" />
<link rel="manifest" href="/site.webmanifest" />

<!-- Sitemaps and Feeds -->
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={dynamicTitle}
	href={new URL('rss.xml', Astro.site)}
/>

<!-- Performance Hints -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />
<link rel="preconnect" href="https://nggbybdeppklrhybokrb.supabase.co" crossorigin />
<link rel="dns-prefetch" href="https://nggbybdeppklrhybokrb.supabase.co" />

<!-- Enhanced SEO Component -->
<SEO
  title={title}
  description={description}
  canonical={canonicalURL.toString()}
  noindex={!isIndexed}
  openGraph={{
    basic: {
      title: title,
      type: pageType === 'article' ? 'article' : 'website',
      image: fullImageUrl,
      url: Astro.url.toString(),
    },
    optional: {
      siteName: dynamicTitle,
      description: description,
      locale: "en_US",
    },
    image: {
      alt: title,
      url: fullImageUrl.includes('logo.jpg') ? new URL('/images/logo.jpg', Astro.site).toString() : fullImageUrl,
      width: 1200,
      height: 630,
      type: "image/jpeg",
    },
    article: pageType === 'article' ? {
      publishedTime: formattedPublishedDate,
      modifiedTime: formattedModifiedDate,
      section: articleSection,
      tags: keywords.split(',').map(k => k.trim()),
      authors: [author],
    } : undefined,
  }}
  twitter={{
    card: "summary_large_image",
    site: "@manhvaoppa",
    creator: "@manhvaoppa", 
    title: title,
    description: description,
    image: fullImageUrl.includes('logo.jpg') ? new URL('/images/logo.jpg', Astro.site).toString() : fullImageUrl,
  }}
  extend={{
    meta: [
      { name: "keywords", content: keywords },
      { name: "author", content: author },
      { name: "language", content: "English" },
      { name: "generator", content: Astro.generator },
      { name: "referrer", content: "no-referrer-when-downgrade" },
      { "http-equiv": "Content-Security-Policy", content: "upgrade-insecure-requests" },
      // Add manga-specific meta tags if applicable
      ...extendedMeta,
    ],
    link: [
      pageType === 'article' && {
        rel: "next",
        href: new URL(`/blog/page/2`, Astro.site).toString(),
      },
    ].filter(Boolean),
  }}
/>

<!-- Structured Data / JSON-LD -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": pageType === 'article' ? 'Article' : 'WebSite',
  "headline": title,
  "description": description,
  "image": new URL(image, Astro.url).toString(),
  "author": {
    "@type": author !== 'Manhva-Oppa' ? 'Person' : 'Organization',
    "name": author,
    ...(author !== 'Manhva-Oppa' ? {} : { "url": Astro.site?.toString() })
  },
  "publisher": {
    "@type": "Organization",
    "name": dynamicTitle,
    "logo": {
      "@type": "ImageObject",
      "url": new URL('/images/logo.jpg', Astro.site).toString()
    }
  },
  "url": Astro.url.toString(),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url.toString()
  },
  ...(pageType === 'article' && formattedPublishedDate ? { "datePublished": formattedPublishedDate } : {}),
  ...(pageType === 'article' && formattedModifiedDate ? { "dateModified": formattedModifiedDate } : {})
})}>  
</script>

{Astro.props.breadcrumbs && (
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement": Astro.props.breadcrumbs.map((crumb, idx) => ({
        "@type": "ListItem",
        "position": idx + 1,
        "name": crumb.label,
        "item": new URL(crumb.path, Astro.site).toString()
      }))
    })}
  </script>
)
}
