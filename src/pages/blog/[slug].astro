---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import MangaSchema from '../../components/MangaSchema.astro';
import { getTitle, getDescription } from '../../consts';
import { getBlogPostBySlug, getLatestBlogPosts, getRelatedBlogPosts, getAllBlogPosts } from '../../lib/blogDataService.js';

// Helper function to estimate reading time
function getReadingTime(content) {
  const wordsPerMinute = 200;
  const text = content.replace(/<\/?[^>]+(>|$)/g, '');
  const wordCount = text.split(/\s+/).length;
  const readingTime = Math.ceil(wordCount / wordsPerMinute);
  return readingTime;
}

// Required for dynamic routes in Astro
export async function getStaticPaths() {
  console.log('DEBUG: Running getStaticPaths for blog/[slug].astro');
  const { posts } = await getAllBlogPosts({ limit: 1000 }); // adjust limit as needed
  const paths = posts.map(post => ({
    params: { slug: post.slug }
  }));
  console.log('DEBUG: Blog slugs generated for static paths:', paths);
  return paths;
}


// Get the slug from the URL
console.log('DEBUG: Rendering blog/[slug].astro for slug:', Astro.params.slug);
const { slug } = Astro.params;

// Get dynamic site info
const dynamicTitle = await getTitle();
const dynamicDescription = await getDescription();

// Fetch the blog post data
const post = await getBlogPostBySlug(slug);

// If post not found, redirect to 404
if (!post) {
  return Astro.redirect('/404');
}

// Calculate estimated reading time
const readingTime = getReadingTime(post.content);

// Build breadcrumbs for SEO and display
const breadcrumbs = [
  { label: 'Home', path: '/', active: false },
  { label: 'Blog', path: '/blog', active: false },
  { label: post.title, path: `/blog/${slug}`, active: true }
];

// Get related blog posts based on manga genres
const relatedPosts = post.manga ? await getRelatedBlogPosts(post.manga.id, 3) : await getLatestBlogPosts(3);

// Format the manga genres if available
const genreNames = post.manga?.genres?.map(g => g.genres.name).filter(Boolean) || [];

---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead 
      title={`${post.title} | ${dynamicTitle}`} 
      description={post.seo_description || dynamicDescription}
      image={post.featured_image || post.manga?.cover_image || '/blog-placeholder-1.jpg'}
      keywords={post.seo_keywords}
      author={post.manga?.author || 'Manhva-Oppa'}
      publishedDate={post.published_date}
      modifiedDate={post.updated_at || post.published_date}
      pageType="article"
      articleSection={post.manga ? 'Manga Review' : 'Blog'}
      breadcrumbs={breadcrumbs}
      isMangaPage={!!post.manga}
      manga={post.manga}
    />
    
    {/* Add specialized manga schema markup if this post is about a manga */}
    {post.manga && (
      <MangaSchema 
        manga={post.manga} 
        isReview={true} 
        postData={post} 
      />
    )}
    <style>
      /* Add any page-specific styles here */
      .manga-cover {
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.8);
      }
      
      /* Blog content styles */
      .blog-content {
        color: #f8f8f8;
        line-height: 1.7;
      }
      
      .blog-content h1, .blog-content h2, .blog-content h3, .blog-content h4, .blog-content h5, .blog-content h6 {
        font-family: 'Bangers', cursive;
        margin-top: 1.5em;
        margin-bottom: 0.75em;
        line-height: 1.2;
        color: #ffffff;
        text-shadow: 2px 2px 0 #000, -2px -2px 0 #000, 2px -2px 0 #000, -2px 2px 0 #000;
        letter-spacing: 0.05em;
      }
      
      .blog-content h1 { font-size: 2.25rem; }
      .blog-content h2 { font-size: 1.875rem; }
      .blog-content h3 { font-size: 1.5rem; }
      .blog-content h4 { font-size: 1.25rem; }
      .blog-content h5 { font-size: 1.125rem; }
      .blog-content h6 { font-size: 1rem; }
      
      .blog-content p {
        margin-bottom: 1.25em;
      }
      
      .blog-content a {
        color: #ef4444;
        text-decoration: none;
        font-weight: bold;
        position: relative;
        transition: all 0.3s;
        padding: 0 2px;
      }
      
      .blog-content a::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        width: 100%;
        height: 2px;
        background: repeating-linear-gradient(
          90deg,
          #ef4444,
          #ef4444 4px,
          transparent 4px,
          transparent 8px
        );
        transform: scaleX(0);
        transform-origin: bottom right;
        transition: transform 0.3s;
      }
      
      .blog-content a:hover {
        color: #f87171;
        text-shadow: 0 0 8px rgba(239, 68, 68, 0.5);
      }
      
      .blog-content a:hover::after {
        transform: scaleX(1);
        transform-origin: bottom left;
      }
      
      .blog-content ul, .blog-content ol {
        margin-left: 1.5em;
        margin-bottom: 1.25em;
      }
      
      .blog-content ul {
        list-style-type: disc;
      }
      
      .blog-content ol {
        list-style-type: decimal;
      }
      .blog-content li {
        margin-bottom: 0.5rem;
      }
      
      .blog-content blockquote {
        position: relative;
        border: 3px solid white;
        box-shadow: 6px 6px 0 theme('colors.red.500');
        clip-path: polygon(
          0 0,
          100% 0,
          100% calc(100% - 10px),
          calc(100% - 10px) 100%,
          0 100%
        );
        padding: 1.5em;
        margin-left: 0;
        margin-right: 0;
        font-style: italic;
        margin-bottom: 1.5em;
        background-color: rgba(0, 0, 0, 0.3);
      }
      
      .blog-content blockquote::before {
        content: '';
        position: absolute;
        inset: -3px;
        background: repeating-linear-gradient(
          45deg,
          theme('colors.red.500'),
          theme('colors.red.500') 3px,
          transparent 3px,
          transparent 12px
        );
        z-index: -1;
        opacity: 0.5;
      }
      
      .blog-content img {
        max-width: 100%;
        height: auto;
        border: 3px solid white;
        box-shadow: 8px 8px 0 rgba(0, 0, 0, 0.5);
        clip-path: polygon(
          0 0, 
          100% 0, 
          100% calc(100% - 15px), 
          calc(100% - 15px) 100%, 
          0 100%
        );
        margin: 1.5em 0;
        transition: transform 0.3s;
      }
      
      .blog-content img:hover {
        transform: scale(1.02) rotate(1deg);
      }
      
      .blog-content pre {
        position: relative;
        background-color: #1a1a1a;
        padding: 1.5em;
        border: 2px solid rgba(255, 255, 255, 0.3);
        box-shadow: 6px 6px 0 rgba(0, 0, 0, 0.5);
        overflow-x: auto;
        margin-bottom: 1.5em;
        clip-path: polygon(
          0 0, 
          100% 0, 
          100% calc(100% - 10px), 
          calc(100% - 10px) 100%, 
          0 100%
        );
      }
      
      .blog-content pre::before {
        content: 'Code';
        position: absolute;
        top: 0;
        right: 0;
        background-color: #ef4444;
        color: white;
        font-family: 'Bangers', cursive;
        padding: 0.2em 0.8em;
        font-size: 0.8em;
        letter-spacing: 0.05em;
        text-shadow: 1px 1px 0 black;
        transform: translateY(-50%);
      }
      
      .blog-content code {
        background-color: rgba(239, 68, 68, 0.2);
        padding: 0.2em 0.4em;
        border-radius: 0.25rem;
        font-family: monospace;
        border: 1px solid rgba(239, 68, 68, 0.3);
      }
      
      .blog-content table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-bottom: 2em;
        position: relative;
        border: 3px solid white;
        box-shadow: 8px 8px 0 rgba(0, 0, 0, 0.5);
        overflow: hidden;
      }
      
      .blog-content th, .blog-content td {
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 0.75em 1em;
        position: relative;
      }
      
      .blog-content th {
        background-color: rgba(239, 68, 68, 0.2);
        font-family: 'Bangers', cursive;
        letter-spacing: 0.05em;
        text-shadow: 1px 1px 0 black;
        text-transform: uppercase;
      }
      
      .blog-content tr:nth-child(even) {
        background-color: rgba(255, 255, 255, 0.05);
      }
      
      .blog-content tr:hover {
        background-color: rgba(239, 68, 68, 0.1);
      }
      
      .blog-content hr {
        border: none;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        margin: 2em 0;
      }
      .blog-content blockquote {
        border-left: 4px solid #f87171;
        padding-left: 1rem;
        font-style: italic;
        margin: 1.5rem 0;
      }
      .blog-content img {
        max-width: 100%;
        height: auto;
        margin: 2rem auto;
        border-radius: 0.5rem;
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <Breadcrumbs title={post.title} />
      <!-- Hero Banner -->
      <div class="relative">
        <div class="w-full h-64 md:h-96 overflow-hidden">
          <img 
            src={post.featured_image || post.manga?.cover_image || '/blog-placeholder-1.jpg'} 
            alt={post.title} 
            class="w-full h-full object-cover opacity-50"
          />
          <div class="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent"></div>
        </div>
        <div class="absolute bottom-0 left-0 right-0 p-6 md:p-12">
          <div class="max-w-4xl mx-auto">
            <h1 class="manga-title text-2xl md:text-4xl lg:text-5xl mb-4">{post.title}</h1>
            <div class="flex flex-wrap items-center gap-4 text-sm">
              <div class="flex items-center manga-border px-3 py-1 bg-black/60">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                <FormattedDate date={new Date(post.published_date)} />
              </div>
              
              <div class="flex items-center manga-border px-3 py-1 bg-black/60">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>{readingTime} min read</span>
              </div>
              
              {post.views > 0 && (
                <div class="flex items-center manga-border px-3 py-1 bg-black/60">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                  <span>{post.views.toLocaleString()}</span>
                </div>
              )}
              
              {post.manga && (
                <a href={`/manga/${post.manga.id}`} class="flex items-center manga-border px-3 py-1 bg-black/60 hover:bg-red-500/20 transition-colors">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                  </svg>
                  <span>{post.manga.title}</span>
                </a>
              )}
              
              <button id="share-button" class="flex items-center manga-border px-3 py-1 bg-black/60 hover:bg-red-500/20 transition-colors cursor-pointer">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                </svg>
                <span>Share</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Blog Content -->
      <article class="py-12 px-4">
        <div class="max-w-6xl mx-auto">
          <div class="flex flex-col lg:flex-row gap-8">
            <!-- Left sidebar with sticky TOC -->
            <div class="hidden lg:block lg:w-1/4">
              <div class="sticky top-24 manga-panel p-5 bg-black/40">
                <h3 class="text-xl font-bold mb-4 border-b border-gray-700 pb-2 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                  </svg>
                  Table of Contents
                </h3>
                <nav class="toc text-sm space-y-2" id="table-of-contents">
                  <!-- TOC will be populated by JS -->
                  <div class="text-gray-400">Loading...</div>
                </nav>
                
                <div class="mt-6 pt-5 border-t border-gray-700">
                  <h4 class="font-bold mb-3 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    Article Info
                  </h4>
                  <ul class="space-y-2 text-sm">
                    <li class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <span>{readingTime} min read</span>
                    </li>
                    <li class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <FormattedDate date={new Date(post.published_date)} />
                    </li>
                    <li class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                      <span>{post.views?.toLocaleString() || 0} views</span>
                    </li>
                  </ul>
                </div>
                
                <div class="mt-6 pt-4 border-t border-gray-700">
                  <button id="scroll-to-top" class="flex items-center text-sm hover:text-red-500 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 11l7-7 7 7M5 19l7-7 7 7" />
                    </svg>
                    Scroll to top
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Main content area -->
            <div class="lg:w-3/4">
              {post.manga && (
                <div class="manga-panel p-6 mb-8 flex flex-col md:flex-row gap-6">
                  <div class="w-full md:w-1/3">
                    <img 
                      src={post.manga.cover_image || '/manga-placeholder.jpg'} 
                      alt={post.manga.title} 
                      class="w-full h-auto manga-cover rounded"
                    />
                  </div>
                  <div class="w-full md:w-2/3">
                    <h3 class="manga-title text-2xl mb-4">{post.manga.title}</h3>
                    <p class="mb-4 text-gray-300 line-clamp-3">{post.manga.description}</p>
                    
                    {genreNames.length > 0 && (
                      <div class="mb-4">
                        <p class="text-gray-400 mb-2">Genres:</p>
                        <div class="flex flex-wrap gap-2">
                          {genreNames.map(genre => (
                            <span class="manga-border px-2 py-1 text-sm bg-gray-700">{genre}</span>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    <a 
                      href={`/manga/${post.manga.id}`} 
                      class="manga-border inline-block px-4 py-2 text-sm bg-red-500 hover:bg-red-600 transition-colors"
                    >
                      View Manga
                    </a>
                  </div>
                </div>
              )}
              
              <!-- Mobile TOC Dropdown (only visible on mobile) -->
              <div class="lg:hidden manga-panel p-4 mb-6 bg-black/40">
                <details class="toc-mobile">
                  <summary class="flex justify-between items-center cursor-pointer">
                    <div class="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                      </svg>
                      <span class="font-bold">Table of Contents</span>
                    </div>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </summary>
                  <nav class="mt-3 pt-3 border-t border-gray-700 text-sm space-y-2" id="mobile-table-of-contents">
                    <!-- Mobile TOC will be populated by JS -->
                    <div class="text-gray-400">Loading...</div>
                  </nav>
                </details>
              </div>
              
              <!-- Article content with ID for TOC generation -->
              <div class="blog-content manga-panel p-6 bg-black/40 prose prose-invert prose-lg max-w-none" id="article-content" set:html={post.content} />
              
              <!-- Article footer with keywords and share buttons -->
              <div class="mt-8 pt-6 border-t border-gray-700 manga-panel p-6 bg-black/40">
                <div class="flex flex-col md:flex-row md:justify-between md:items-center gap-6">
                  {post.seo_keywords && (
                    <div class="md:w-2/3">
                      <p class="text-gray-400 mb-3 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                        </svg>
                        Topic Tags:
                      </p>
                      <div class="flex flex-wrap gap-2">
                        {post.seo_keywords.split(',').map(keyword => (
                          <a href={`/blog?tag=${encodeURIComponent(keyword.trim())}`} class="manga-border px-2 py-1 text-xs bg-gray-800 hover:bg-red-500/20 transition-colors">
                            {keyword.trim()}
                          </a>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  <div class="md:w-1/3 flex justify-end space-x-4">
                    <a href="#top" class="manga-border px-3 py-2 bg-gray-800 hover:bg-red-500/20 transition-colors text-sm flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 11l7-7 7 7M5 19l7-7 7 7" />
                      </svg>
                      Back to top
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </article>
      
      <script>
        // Generate table of contents from headings
        document.addEventListener('DOMContentLoaded', function() {
          const articleContent = document.getElementById('article-content');
          const tableOfContents = document.getElementById('table-of-contents');
          const mobileTOC = document.getElementById('mobile-table-of-contents');
          const scrollToTopButton = document.getElementById('scroll-to-top');
          const shareButton = document.getElementById('share-button');
          
          if (articleContent && (tableOfContents || mobileTOC)) {
            const headings = articleContent.querySelectorAll('h1, h2, h3, h4');
            
            if (headings.length > 0) {
              // Clear loading message
              if (tableOfContents) tableOfContents.innerHTML = '';
              if (mobileTOC) mobileTOC.innerHTML = '';
              
              const tocList = document.createElement('ul');
              tocList.className = 'space-y-2';
              
              headings.forEach((heading, index) => {
                // Add ID to the heading if it doesn't have one
                if (!heading.id) {
                  heading.id = `heading-${index}`;
                }
                
                const listItem = document.createElement('li');
                const link = document.createElement('a');
                link.href = `#${heading.id}`;
                link.textContent = heading.textContent;
                link.className = 'hover:text-red-500 transition-colors block';
                
                // Add indentation based on heading level
                const headingLevel = parseInt(heading.tagName.charAt(1));
                if (headingLevel > 1) {
                  listItem.style.paddingLeft = `${(headingLevel - 1) * 12}px`;
                }
                
                listItem.appendChild(link);
                tocList.appendChild(listItem);
              });
              
              if (tableOfContents) tableOfContents.appendChild(tocList.cloneNode(true));
              if (mobileTOC) mobileTOC.appendChild(tocList.cloneNode(true));
            } else {
              // No headings found
              const message = document.createElement('p');
              message.textContent = 'No sections found in this article.';
              message.className = 'text-gray-400 text-sm';
              
              if (tableOfContents) tableOfContents.innerHTML = '';
              if (mobileTOC) mobileTOC.innerHTML = '';
              
              if (tableOfContents) tableOfContents.appendChild(message.cloneNode(true));
              if (mobileTOC) mobileTOC.appendChild(message.cloneNode(true));
            }
          }
          
          // Scroll to top functionality
          if (scrollToTopButton) {
            scrollToTopButton.addEventListener('click', function() {
              window.scrollTo({ top: 0, behavior: 'smooth' });
            });
          }
          
          // Web Share API for the share button
          if (shareButton && navigator.share) {
            shareButton.addEventListener('click', async () => {
              try {
                await navigator.share({
                  title: document.title,
                  url: window.location.href
                });
              } catch (err) {
                console.error('Error sharing:', err);
              }
            });
          } else if (shareButton) {
            // Fallback for browsers that don't support Web Share API
            shareButton.addEventListener('click', () => {
              const dummy = document.createElement('input');
              document.body.appendChild(dummy);
              dummy.value = window.location.href;
              dummy.select();
              document.execCommand('copy');
              document.body.removeChild(dummy);
              
              // Show a small tooltip or notification
              alert('URL copied to clipboard!');
            });
          }
        });
      </script>
      
      <!-- Related Posts -->
      {relatedPosts.length > 0 && (
        <section class="py-12 bg-gray-900">
          <div class="max-w-6xl mx-auto px-4">
            <h2 class="manga-title text-2xl md:text-3xl mb-8">Related Articles</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
              {relatedPosts.map(relatedPost => (
                <a href={`/blog/${relatedPost.slug}`} class="manga-panel bg-gray-800 hover:transform hover:scale-105 transition-transform duration-300 block h-full">
                  <div class="h-48 overflow-hidden">
                    <img 
                      src={relatedPost.featured_image || relatedPost.manga?.cover_image || '/blog-placeholder-1.jpg'} 
                      alt={relatedPost.title} 
                      class="w-full h-full object-cover"
                    />
                  </div>
                  <div class="p-4">
                    <h3 class="text-lg font-bold mb-2 hover:text-red-500 transition-colors">{relatedPost.title}</h3>
                    <p class="text-sm text-gray-400 line-clamp-2">{relatedPost.seo_description}</p>
                  </div>
                </a>
              ))}
            </div>
          </div>
        </section>
      )}
    </main>
    <Footer />
  </body>
</html>
